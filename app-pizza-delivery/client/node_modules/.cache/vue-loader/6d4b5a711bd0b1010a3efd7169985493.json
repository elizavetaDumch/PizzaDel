{"remainingRequest":"C:\\Users\\Liza\\app-pizza-delivery\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Liza\\app-pizza-delivery\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Liza\\app-pizza-delivery\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liza\\app-pizza-delivery\\client\\src\\components\\Order.vue?vue&type=template&id=5121c764&scoped=true&","dependencies":[{"path":"C:\\Users\\Liza\\app-pizza-delivery\\client\\src\\components\\Order.vue","mtime":1622045521690},{"path":"C:\\Users\\Liza\\app-pizza-delivery\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liza\\app-pizza-delivery\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Liza\\app-pizza-delivery\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liza\\app-pizza-delivery\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}